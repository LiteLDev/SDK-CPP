/**
 * @file  ActorMobilityUtils.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

/**
 * @brief MC namespace ActorMobilityUtils.
 *
 */
namespace ActorMobilityUtils {

#define AFTER_EXTRA

#undef AFTER_EXTRA
    /**
     * @symbol ?endJump@ActorMobilityUtils@@YAXAEBUStateVectorComponent@@AEAUMobJumpComponent@@AEAUSynchedActorDataComponent@@PEBUVehicleComponent@@V?$ViewT@VStrictEntityContext@@VEntityRegistryBase@@U?$Include@V?$FlagComponent@UParrotFlag@@@@@@$$CBUPassengerComponent@@@@AEAV?$EntityModifierT@VEntityRegistryBase@@VStrictEntityContext@@V?$FlagComponent@UExitFromPassengerFlag@@@@V?$FlagComponent@UStopRidingRequestFlag@@@@@@@Z
     */
    MCAPI void endJump(struct StateVectorComponent const &, struct MobJumpComponent &, struct SynchedActorDataComponent &, struct VehicleComponent const *, class ViewT<class StrictEntityContext, class EntityRegistryBase, struct Include<class FlagComponent<struct ParrotFlag>>, struct PassengerComponent const>, class EntityModifierT<class EntityRegistryBase, class StrictEntityContext, class FlagComponent<struct ExitFromPassengerFlag>, class FlagComponent<struct StopRidingRequestFlag>> &);
    /**
     * @symbol ?getJumpPower@ActorMobilityUtils@@YAMPEBVJumpControlComponent@@PEBV?$FlagComponent@USquidFlag@@@@@Z
     */
    MCAPI float getJumpPower(class JumpControlComponent const *, class FlagComponent<struct SquidFlag> const *);
    /**
     * @symbol ?getPosFromAABB@ActorMobilityUtils@@YA?AVVec3@@AEBVAABB@@MAEBVVec2@@@Z
     */
    MCAPI class Vec3 getPosFromAABB(class AABB const &, float, class Vec2 const &);
    /**
     * @symbol ?isFlying@ActorMobilityUtils@@YA_NAEBUAbilitiesComponent@@@Z
     */
    MCAPI bool isFlying(struct AbilitiesComponent const &);
    /**
     * @symbol ?isFree@ActorMobilityUtils@@YA_NAEBVIConstBlockSource@@AEBVAABB@@AEBVVec3@@M@Z
     */
    MCAPI bool isFree(class IConstBlockSource const &, class AABB const &, class Vec3 const &, float);
    /**
     * @symbol ?isImmersedInWater@ActorMobilityUtils@@YA_NAEBVVec3@@AEBVIConstBlockSource@@AEBVVec2@@@Z
     */
    MCAPI bool isImmersedInWater(class Vec3 const &, class IConstBlockSource const &, class Vec2 const &);
    /**
     * @symbol ?isUnderLiquid@ActorMobilityUtils@@YA_NAEBVVec3@@0AEBVIConstBlockSource@@W4MaterialType@@@Z
     */
    MCAPI bool isUnderLiquid(class Vec3 const &, class Vec3 const &, class IConstBlockSource const &, enum MaterialType);
    /**
     * @symbol ?shouldApplyWaterGravity@ActorMobilityUtils@@YA_NPEBVNavigationComponent@@PEBVPhysicsComponent@@AEBVSynchedActorData@@AEBVVec3@@AEBVIConstBlockSource@@AEBVVec2@@@Z
     */
    MCAPI bool shouldApplyWaterGravity(class NavigationComponent const *, class PhysicsComponent const *, class SynchedActorData const &, class Vec3 const &, class IConstBlockSource const &, class Vec2 const &);

};