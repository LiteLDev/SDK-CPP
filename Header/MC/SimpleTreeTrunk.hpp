/**
 * @file  SimpleTreeTrunk.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "TreeHelper.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class SimpleTreeTrunk.
 *
 */
class SimpleTreeTrunk {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SIMPLETREETRUNK
public:
    class SimpleTreeTrunk& operator=(class SimpleTreeTrunk const &) = delete;
    SimpleTreeTrunk(class SimpleTreeTrunk const &) = delete;
    SimpleTreeTrunk() = delete;
#endif

public:
    /**
     * @note   Virtual function table index: 0
     * @symbol 
     */
    virtual ~SimpleTreeTrunk();
    /**
     * @note   Virtual function table index: 1
     * @symbol ?placeTrunk@SimpleTreeTrunk@@UEBA?AV?$optional@VBlockPos@@@std@@AEAVIBlockWorldGenAPI@@AEBVBlockPos@@AEAVRandom@@HAEAVRenderParams@@AEBUTreeParams@TreeHelper@@PEBVITreeCanopy@@@Z
     */
    virtual class std::optional<class BlockPos> placeTrunk(class IBlockWorldGenAPI &, class BlockPos const &, class Random &, int, class RenderParams &, struct TreeHelper::TreeParams const &, class ITreeCanopy const *) const;
    /**
     * @note   Virtual function table index: 2
     * @symbol ?getTreeHeight@SimpleTreeTrunk@@UEBAHAEAVRandom@@@Z
     */
    virtual int getTreeHeight(class Random &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SIMPLETREETRUNK
#endif

};