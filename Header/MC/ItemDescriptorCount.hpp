/**
 * @file  ItemDescriptorCount.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "ItemDescriptor.hpp"

#undef BEFORE_EXTRA

/**
 * @brief MC class ItemDescriptorCount.
 *
 */
class ItemDescriptorCount {

#define AFTER_EXTRA
// Add Member There
    ItemDescriptor mDescriptor;
    unsigned short mCount; //72

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ITEMDESCRIPTORCOUNT
public:
    class ItemDescriptorCount& operator=(class ItemDescriptorCount const &) = delete;
    ItemDescriptorCount(class ItemDescriptorCount const &) = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ITEMDESCRIPTORCOUNT
#endif
    /**
     * @symbol ??0ItemDescriptorCount@@QEAA@XZ
     */
    MCAPI ItemDescriptorCount();
    /**
     * @symbol ??0ItemDescriptorCount@@QEAA@V?$basic_string_span@$$CBD$0?0@gsl@@HG@Z
     */
    MCAPI ItemDescriptorCount(class gsl::basic_string_span<char const, -1>, int, unsigned short);
    /**
     * @symbol ??0ItemDescriptorCount@@QEAA@AEBVItemDescriptor@@G@Z
     */
    MCAPI ItemDescriptorCount(class ItemDescriptor const &, unsigned short);
    /**
     * @symbol ??0ItemDescriptorCount@@QEAA@AEBVItem@@HG@Z
     */
    MCAPI ItemDescriptorCount(class Item const &, int, unsigned short);
    /**
     * @symbol ??0ItemDescriptorCount@@QEAA@AEBVBlockLegacy@@G@Z
     */
    MCAPI ItemDescriptorCount(class BlockLegacy const &, unsigned short);
    /**
     * @symbol ??0ItemDescriptorCount@@QEAA@AEBVBlock@@G@Z
     */
    MCAPI ItemDescriptorCount(class Block const &, unsigned short);
    /**
     * @symbol ?getStackSize@ItemDescriptorCount@@QEBAFXZ
     */
    MCAPI short getStackSize() const;
    /**
     * @symbol ?setStackSize@ItemDescriptorCount@@QEAAXF@Z
     */
    MCAPI void setStackSize(short);
    /**
     * @symbol ??1ItemDescriptorCount@@QEAA@XZ
     */
    MCAPI ~ItemDescriptorCount();

};