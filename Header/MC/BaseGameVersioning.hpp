/**
 * @file  BaseGameVersioning.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC namespace BaseGameVersioning.
 *
 */
namespace BaseGameVersioning {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
MCAPI extern class BaseGameVersion const PATCH_UPGRADE_VERSION;
MCAPI extern class BaseGameVersion const REQUIRED_BASE_GAME_VERSION_FOR_OLD_CONTENT;
    /**
     * @symbol ?getAvailableBehaviorPackBaseGameVersions@BaseGameVersioning@@YAAEBV?$vector@VBaseGameVersion@@V?$allocator@VBaseGameVersion@@@std@@@std@@XZ
     */
    MCAPI std::vector<class BaseGameVersion> const & getAvailableBehaviorPackBaseGameVersions();
    /**
     * @symbol ?getAvailableResourcePackBaseGameVersions@BaseGameVersioning@@YAAEBV?$vector@VBaseGameVersion@@V?$allocator@VBaseGameVersion@@@std@@@std@@XZ
     */
    MCAPI std::vector<class BaseGameVersion> const & getAvailableResourcePackBaseGameVersions();
    /**
     * @symbol ?upgradeBaseGameVersionFromWorldTemplate@BaseGameVersioning@@YA_NAEBVWorldTemplateManager@@AEAVLevelData@@@Z
     */
    MCAPI bool upgradeBaseGameVersionFromWorldTemplate(class WorldTemplateManager const &, class LevelData &);

};