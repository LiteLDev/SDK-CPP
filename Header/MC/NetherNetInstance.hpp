/**
 * @file  NetherNetInstance.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Bedrock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC structure NetherNetInstance.
 *
 */
struct NetherNetInstance {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_NETHERNETINSTANCE
public:
    struct NetherNetInstance& operator=(struct NetherNetInstance const &) = delete;
    NetherNetInstance(struct NetherNetInstance const &) = delete;
    NetherNetInstance() = delete;
#endif
public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_NETHERNETINSTANCE
    /**
     * @note   Virtual function table index: -1
     * @symbol ?_onDisable@NetherNetInstance@@UEAAXXZ
     */
    MCVAPI void _onDisable();
    /**
     * @note   Virtual function table index: -1
     * @symbol ?_onEnable@NetherNetInstance@@UEAAXXZ
     */
    MCVAPI void _onEnable();
    /**
     * @note   Virtual function table index: -1
     * @symbol ?addConnectionStateListener@NetherNetInstance@@UEAAXPEAVConnectionStateListener@Connector@@@Z
     */
    MCVAPI void addConnectionStateListener(class Connector::ConnectionStateListener *);
    /**
     * @note   Virtual function table index: -1
     * @symbol ?connect@NetherNetInstance@@UEAA_NPEAX@Z
     */
    MCVAPI bool connect(void *);
    /**
     * @note   Virtual function table index: -1
     * @symbol ?disconnect@NetherNetInstance@@UEAAXXZ
     */
    MCVAPI void disconnect();
    /**
     * @note   Virtual function table index: -1
     * @symbol ?getConnectedGameInfo@NetherNetInstance@@UEBAAEBVGameConnectionInfo@Social@@XZ
     */
    MCVAPI class Social::GameConnectionInfo const & getConnectedGameInfo() const;
    /**
     * @note   Virtual function table index: -1
     * @symbol ?getIPv4Port@NetherNetInstance@@UEBAGXZ
     */
    MCVAPI unsigned short getIPv4Port() const;
    /**
     * @note   Virtual function table index: -1
     * @symbol ?getIPv6Port@NetherNetInstance@@UEBAGXZ
     */
    MCVAPI unsigned short getIPv6Port() const;
    /**
     * @note   Virtual function table index: -1
     * @symbol ?getLocalIp@NetherNetInstance@@UEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
     */
    MCVAPI std::string getLocalIp();
    /**
     * @note   Virtual function table index: -1
     * @symbol ?getLocalIps@NetherNetInstance@@UEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
     */
    MCVAPI std::vector<std::string> getLocalIps() const;
    /**
     * @note   Virtual function table index: -1
     * @symbol ?getNatPunchInfo@NetherNetInstance@@UEBA?AUNatPunchInfo@Connector@@XZ
     */
    MCVAPI struct Connector::NatPunchInfo getNatPunchInfo() const;
    /**
     * @note   Virtual function table index: -1
     * @symbol ?getPort@NetherNetInstance@@UEBAGXZ
     */
    MCVAPI unsigned short getPort() const;
    /**
     * @note   Virtual function table index: -1
     * @symbol ?getRefinedLocalIps@NetherNetInstance@@UEBA?AV?$vector@USystemAddress@RakNet@@V?$allocator@USystemAddress@RakNet@@@std@@@std@@XZ
     */
    MCVAPI std::vector<struct RakNet::SystemAddress> getRefinedLocalIps() const;
    /**
     * @note   Virtual function table index: -1
     * @symbol ?getTransportIdentifier@NetherNetInstance@@UEBA_KXZ
     */
    MCVAPI unsigned __int64 getTransportIdentifier() const;
    /**
     * @note   Virtual function table index: -1
     * @symbol ?host@NetherNetInstance@@UEAA_NAEBUConnectionDefinition@@@Z
     */
    MCVAPI bool host(struct ConnectionDefinition const &);
    /**
     * @note   Virtual function table index: -1
     * @symbol ?isIPv4Supported@NetherNetInstance@@UEBA_NXZ
     */
    MCVAPI bool isIPv4Supported() const;
    /**
     * @note   Virtual function table index: -1
     * @symbol ?isIPv6Supported@NetherNetInstance@@UEBA_NXZ
     */
    MCVAPI bool isIPv6Supported() const;
    /**
     * @note   Virtual function table index: -1
     * @symbol ?isServer@NetherNetInstance@@UEBA_NXZ
     */
    MCVAPI bool isServer() const;
    /**
     * @note   Virtual function table index: -1
     * @symbol ?removeConnectionStateListener@NetherNetInstance@@UEAAXPEAVConnectionStateListener@Connector@@@Z
     */
    MCVAPI void removeConnectionStateListener(class Connector::ConnectionStateListener *);
    /**
     * @note   Virtual function table index: -1
     * @symbol ?runEvents@NetherNetInstance@@UEAAXXZ
     */
    MCVAPI void runEvents();
    /**
     * @note   Virtual function table index: -1
     * @symbol ?setupNatPunch@NetherNetInstance@@UEAAX_N@Z
     */
    MCVAPI void setupNatPunch(bool);
    /**
     * @note   Virtual function table index: -1
     * @symbol ?startNatPunchingClient@NetherNetInstance@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@G@Z
     */
    MCVAPI void startNatPunchingClient(std::string const &, unsigned short);
    /**
     * @note   Virtual function table index: -1
     * @symbol ?tick@NetherNetInstance@@UEAAXXZ
     */
    MCVAPI void tick();
#endif
    /**
     * @symbol ??0NetherNetInstance@@QEAA@V?$shared_ptr@VLibHttpClientInstance@Http@Bedrock@@@std@@@Z
     */
    MCAPI NetherNetInstance(class std::shared_ptr<class Bedrock::Http::LibHttpClientInstance>);

};