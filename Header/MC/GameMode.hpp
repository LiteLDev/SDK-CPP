/**
 * @file  GameMode.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
class ServerPlayer;
#undef BEFORE_EXTRA

/**
 * @brief MC class GameMode.
 *
 */
class GameMode {

#define AFTER_EXTRA
// Add Member There
public:
    LIAPI ServerPlayer* getPlayer();
#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_GAMEMODE
public:
    class GameMode& operator=(class GameMode const &) = delete;
    GameMode(class GameMode const &) = delete;
    GameMode() = delete;
#endif

public:
    /**
     * @note   Virtual function table index: 0
     * @symbol 
     */
    virtual ~GameMode();
    /**
     * @note   Virtual function table index: 1
     * @symbol ?startDestroyBlock@GameMode@@UEAA_NAEBVBlockPos@@EAEA_N@Z
     */
    virtual bool startDestroyBlock(class BlockPos const &, unsigned char, bool &);
    /**
     * @note   Virtual function table index: 2
     * @symbol ?destroyBlock@GameMode@@UEAA_NAEBVBlockPos@@E@Z
     */
    virtual bool destroyBlock(class BlockPos const &, unsigned char);
    /**
     * @note   Virtual function table index: 3
     * @symbol ?continueDestroyBlock@GameMode@@UEAA_NAEBVBlockPos@@EAEBVVec3@@AEA_N@Z
     */
    virtual bool continueDestroyBlock(class BlockPos const &, unsigned char, class Vec3 const &, bool &);
    /**
     * @note   Virtual function table index: 4
     * @symbol ?stopDestroyBlock@GameMode@@UEAAXAEBVBlockPos@@@Z
     */
    virtual void stopDestroyBlock(class BlockPos const &);
    /**
     * @note   Virtual function table index: 5
     * @symbol ?startBuildBlock@GameMode@@UEAAXAEBVBlockPos@@E@Z
     */
    virtual void startBuildBlock(class BlockPos const &, unsigned char);
    /**
     * @note   Virtual function table index: 6
     * @symbol ?buildBlock@GameMode@@UEAA_NAEBVBlockPos@@E_N@Z
     */
    virtual bool buildBlock(class BlockPos const &, unsigned char, bool);
    /**
     * @note   Virtual function table index: 7
     * @symbol ?continueBuildBlock@GameMode@@UEAAXAEBVBlockPos@@E@Z
     */
    virtual void continueBuildBlock(class BlockPos const &, unsigned char);
    /**
     * @note   Virtual function table index: 8
     * @symbol ?stopBuildBlock@GameMode@@UEAAXXZ
     */
    virtual void stopBuildBlock();
    /**
     * @note   Virtual function table index: 9
     * @symbol ?tick@GameMode@@UEAAXXZ
     */
    virtual void tick();
    /**
     * @note   Virtual function table index: 10
     * @symbol ?getPickRange@GameMode@@UEAAMAEBW4InputMode@@_N@Z
     */
    virtual float getPickRange(enum InputMode const &, bool);
    /**
     * @note   Virtual function table index: 11
     * @symbol ?useItem@GameMode@@UEAA_NAEAVItemStack@@@Z
     */
    virtual bool useItem(class ItemStack &);
    /**
     * @note   Virtual function table index: 12
     * @symbol ?useItemOn@GameMode@@UEAA_NAEAVItemStack@@AEBVBlockPos@@EAEBVVec3@@PEBVBlock@@@Z
     */
    virtual bool useItemOn(class ItemStack &, class BlockPos const &, unsigned char, class Vec3 const &, class Block const *);
    /**
     * @note   Virtual function table index: 13
     * @symbol ?interact@GameMode@@UEAA_NAEAVActor@@AEBVVec3@@@Z
     */
    virtual bool interact(class Actor &, class Vec3 const &);
    /**
     * @note   Virtual function table index: 14
     * @symbol ?attack@GameMode@@UEAA_NAEAVActor@@@Z
     */
    virtual bool attack(class Actor &);
    /**
     * @note   Virtual function table index: 15
     * @symbol ?releaseUsingItem@GameMode@@UEAAXXZ
     */
    virtual void releaseUsingItem();
    /**
     * @note   Virtual function table index: 16
     * @symbol ?setTrialMode@GameMode@@UEAAX_N@Z
     */
    virtual void setTrialMode(bool);
    /**
     * @note   Virtual function table index: 17
     * @symbol ?isInTrialMode@GameMode@@UEAA_NXZ
     */
    virtual bool isInTrialMode();
    /**
     * @note   Virtual function table index: 18
     * @symbol ?registerUpsellScreenCallback@GameMode@@UEAAXV?$function@$$A6AX_N@Z@std@@@Z
     */
    virtual void registerUpsellScreenCallback(class std::function<void (bool)>);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_GAMEMODE
#endif
    /**
     * @symbol ??0GameMode@@QEAA@AEAVPlayer@@V?$unique_ptr@UIGameModeTimer@@U?$default_delete@UIGameModeTimer@@@std@@@std@@V?$unique_ptr@UIGameModeMessenger@@U?$default_delete@UIGameModeMessenger@@@std@@@3@@Z
     */
    MCAPI GameMode(class Player &, std::unique_ptr<struct IGameModeTimer>, std::unique_ptr<struct IGameModeMessenger>);
    /**
     * @symbol ?_startDestroyBlock@GameMode@@QEAA_NAEBVBlockPos@@AEBVVec3@@EAEA_N@Z
     */
    MCAPI bool _startDestroyBlock(class BlockPos const &, class Vec3 const &, unsigned char, bool &);
    /**
     * @symbol ?_tickContinueDestroyBlock@GameMode@@QEAA_NAEBVBlockPos@@AEBVVec3@@EAEA_NAEBV?$function@$$A6AXXZ@std@@@Z
     */
    MCAPI bool _tickContinueDestroyBlock(class BlockPos const &, class Vec3 const &, unsigned char, bool &, class std::function<void (void)> const &);
    /**
     * @symbol ?baseUseItem@GameMode@@QEAA_NAEAVItemStack@@@Z
     */
    MCAPI bool baseUseItem(class ItemStack &);
    /**
     * @symbol ?createBlockBreakCaptureScope@GameMode@@QEAA?AV?$final_action@V?$function@$$A6AXXZ@std@@@gsl@@V?$function@$$A6AXAEBVItemStack@@0AEBVBlockPos@@@Z@std@@@Z
     */
    MCAPI class gsl::final_action<class std::function<void (void)>> createBlockBreakCaptureScope(class std::function<void (class ItemStack const &, class ItemStack const &, class BlockPos const &)>);
    /**
     * @symbol ?getDestroyBlockFace@GameMode@@QEBAEXZ
     */
    MCAPI unsigned char getDestroyBlockFace() const;
    /**
     * @symbol ?getDestroyBlockPos@GameMode@@QEBAAEBVBlockPos@@XZ
     */
    MCAPI class BlockPos const & getDestroyBlockPos() const;
    /**
     * @symbol ?getDestroyProgress@GameMode@@QEAAMXZ
     */
    MCAPI float getDestroyProgress();
    /**
     * @symbol ?getDestroyRate@GameMode@@QEAAMAEBVBlock@@@Z
     */
    MCAPI float getDestroyRate(class Block const &);
    /**
     * @symbol ?getMaxPickRange@GameMode@@QEAAMXZ
     */
    MCAPI float getMaxPickRange();
    /**
     * @symbol ?getMaxPickRangeSqr@GameMode@@QEAAMXZ
     */
    MCAPI float getMaxPickRangeSqr();
    /**
     * @symbol ?isLastBuildBlockInteractive@GameMode@@QEBA_NXZ
     */
    MCAPI bool isLastBuildBlockInteractive() const;
MCAPI static float const PICKRANGE_CREATIVE_MAXIMUM;
MCAPI static float const PICKRANGE_CREATIVE_MAXIMUM_SQR;
MCAPI static float const PICKRANGE_GAMEPAD;
MCAPI static float const PICKRANGE_MOUSE;
MCAPI static float const PICKRANGE_SURVIVAL_MAXIMUM;
MCAPI static float const PICKRANGE_SURVIVAL_MAXIMUM_SQR;
MCAPI static float const PICKRANGE_TOUCH_CREATIVE;
MCAPI static float const PICKRANGE_TOUCH_SURVIVAL;
MCAPI static float const PICKRANGE_VR_CREATIVE;
MCAPI static float const PICKRANGE_VR_SURVIVAL;

//private:
    /**
     * @symbol ?_canDestroy@GameMode@@AEAA_NAEBVBlockPos@@E@Z
     */
    MCAPI bool _canDestroy(class BlockPos const &, unsigned char);
    /**
     * @symbol ?_canUseBlock@GameMode@@AEAA_NAEBVBlock@@@Z
     */
    MCAPI bool _canUseBlock(class Block const &);
    /**
     * @symbol ?_creativeDestroyBlock@GameMode@@AEAA_NAEBVBlockPos@@E@Z
     */
    MCAPI bool _creativeDestroyBlock(class BlockPos const &, unsigned char);

private:

};