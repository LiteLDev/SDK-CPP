/**
 * @file  WorldBlockTarget.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class WorldBlockTarget.
 *
 */
class WorldBlockTarget {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_WORLDBLOCKTARGET
public:
    class WorldBlockTarget& operator=(class WorldBlockTarget const &) = delete;
    WorldBlockTarget(class WorldBlockTarget const &) = delete;
    WorldBlockTarget() = delete;
#endif

public:
    /**
     * @note   Virtual function table index: 0
     * @symbol 
     */
    virtual ~WorldBlockTarget();
    /**
     * @note   Virtual function table index: 1
     * @symbol 
     */
    virtual void __unk_vfn_1();
    /**
     * @note   Virtual function table index: 2
     * @symbol ?getChunk@WorldBlockTarget@@UEAAPEAVLevelChunk@@AEBVChunkPos@@@Z
     */
    virtual class LevelChunk * getChunk(class ChunkPos const &);
    /**
     * @note   Virtual function table index: 3
     * @symbol ?tryGetLiquidBlock@WorldBlockTarget@@UEBAPEBVBlock@@AEBVBlockPos@@@Z
     */
    virtual class Block const * tryGetLiquidBlock(class BlockPos const &) const;
    /**
     * @note   Virtual function table index: 4
     * @symbol ?getBlock@WorldBlockTarget@@UEBAAEBVBlock@@AEBVBlockPos@@@Z
     */
    virtual class Block const & getBlock(class BlockPos const &) const;
    /**
     * @note   Virtual function table index: 5
     * @symbol ?getBlockNoBoundsCheck@WorldBlockTarget@@UEBAAEBVBlock@@AEBVBlockPos@@@Z
     */
    virtual class Block const & getBlockNoBoundsCheck(class BlockPos const &) const;
    /**
     * @note   Virtual function table index: 6
     * @symbol ?getExtraBlock@WorldBlockTarget@@UEBAAEBVBlock@@AEBVBlockPos@@@Z
     */
    virtual class Block const & getExtraBlock(class BlockPos const &) const;
    /**
     * @note   Virtual function table index: 7
     * @symbol ?fetchBlocksInBox@WorldBlockTarget@@UEAA?AV?$span@$$CBV?$BlockDataFetchResult@VBlock@@@@$0?0@gsl@@AEBVBoundingBox@@V?$function@$$A6A_NAEBVBlock@@@Z@std@@@Z
     */
    virtual class gsl::span<class BlockDataFetchResult<class Block> const, -1> fetchBlocksInBox(class BoundingBox const &, class std::function<bool (class Block const &)>);
    /**
     * @note   Virtual function table index: 8
     * @symbol ?hasBiomeTag@WorldBlockTarget@@UEBA_N_KAEBVBlockPos@@@Z
     */
    virtual bool hasBiomeTag(unsigned __int64, class BlockPos const &) const;
    /**
     * @note   Virtual function table index: 9
     * @symbol ?setBlock@WorldBlockTarget@@UEAA_NAEBVBlockPos@@AEBVBlock@@H@Z
     */
    virtual bool setBlock(class BlockPos const &, class Block const &, int);
    /**
     * @note   Virtual function table index: 10
     * @symbol ?setBlockSimple@WorldBlockTarget@@UEAA_NAEBVBlockPos@@AEBVBlock@@@Z
     */
    virtual bool setBlockSimple(class BlockPos const &, class Block const &);
    /**
     * @note   Virtual function table index: 11
     * @symbol 
     */
    virtual void __unk_vfn_11();
    /**
     * @note   Virtual function table index: 12
     * @symbol ?placeStructure@WorldBlockTarget@@UEAA_NAEBVBlockPos@@AEAVStructureTemplate@@AEAVStructureSettings@@@Z
     */
    virtual bool placeStructure(class BlockPos const &, class StructureTemplate &, class StructureSettings &);
    /**
     * @note   Virtual function table index: 13
     * @symbol ?mayPlace@WorldBlockTarget@@UEBA_NAEBVBlockPos@@AEBVBlock@@@Z
     */
    virtual bool mayPlace(class BlockPos const &, class Block const &) const;
    /**
     * @note   Virtual function table index: 14
     * @symbol ?canSurvive@WorldBlockTarget@@UEBA_NAEBVBlockPos@@AEBVBlock@@@Z
     */
    virtual bool canSurvive(class BlockPos const &, class Block const &) const;
    /**
     * @note   Virtual function table index: 15
     * @symbol ?getMaxHeight@WorldBlockTarget@@UEBAFXZ
     */
    virtual short getMaxHeight() const;
    /**
     * @note   Virtual function table index: 16
     * @symbol ?getMinHeight@WorldBlockTarget@@UEBAFXZ
     */
    virtual short getMinHeight() const;
    /**
     * @note   Virtual function table index: 17
     * @symbol ?shimPlaceForOldFeatures@WorldBlockTarget@@UEBA_NAEBVFeature@@AEBVBlockPos@@AEAVRandom@@@Z
     */
    virtual bool shimPlaceForOldFeatures(class Feature const &, class BlockPos const &, class Random &) const;
    /**
     * @note   Virtual function table index: 18
     * @symbol ?getHeightmap@WorldBlockTarget@@UEAAFHH@Z
     */
    virtual short getHeightmap(int, int);
    /**
     * @note   Virtual function table index: 19
     * @symbol ?isLegacyLevel@WorldBlockTarget@@UEAA_NXZ
     */
    virtual bool isLegacyLevel();
    /**
     * @note   Virtual function table index: 20
     * @symbol ?getBiome@WorldBlockTarget@@UEBAPEBVBiome@@AEBVBlockPos@@@Z
     */
    virtual class Biome const * getBiome(class BlockPos const &) const;
    /**
     * @note   Virtual function table index: 21
     * @symbol ?isInBounds@WorldBlockTarget@@UEBA_NAEBVPos@@@Z
     */
    virtual bool isInBounds(class Pos const &) const;
    /**
     * @note   Virtual function table index: 22
     * @symbol ?getLocalWaterLevel@WorldBlockTarget@@UEBAFAEBVBlockPos@@@Z
     */
    virtual short getLocalWaterLevel(class BlockPos const &) const;
    /**
     * @note   Virtual function table index: 23
     * @symbol ?getLevelData@WorldBlockTarget@@UEBAAEBVLevelData@@XZ
     */
    virtual class LevelData const & getLevelData() const;
    /**
     * @note   Virtual function table index: 24
     * @symbol ?getContext@WorldBlockTarget@@UEAAAEBUWorldGenContext@@XZ
     */
    virtual struct WorldGenContext const & getContext();
    /**
     * @note   Virtual function table index: 25
     * @symbol ?disableBlockSimple@WorldBlockTarget@@UEAAXXZ
     */
    virtual void disableBlockSimple();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_WORLDBLOCKTARGET
    /**
     * @note   Virtual function table index: -1
     * @symbol ?apply@WorldBlockTarget@@UEBA_NXZ
     */
    MCVAPI bool apply() const;
    /**
     * @note   Virtual function table index: -1
     * @symbol ?canGetChunk@WorldBlockTarget@@UEBA_NXZ
     */
    MCVAPI bool canGetChunk() const;
#endif
    /**
     * @symbol ??0WorldBlockTarget@@QEAA@AEAVBlockSource@@AEBUWorldGenContext@@@Z
     */
    MCAPI WorldBlockTarget(class BlockSource &, struct WorldGenContext const &);

};