/**
 * @file  CommandOrigin.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "Bedrock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
class ServerPlayer;
class CommandArea;
enum CommandOriginType : char;

#undef BEFORE_EXTRA

/**
 * @brief MC class CommandOrigin.
 *
 */
class CommandOrigin {

#define AFTER_EXTRA
// Add Member There
public:
LIAPI ServerPlayer* getPlayer() const;

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_COMMANDORIGIN
public:
    class CommandOrigin& operator=(class CommandOrigin const &) = delete;
    CommandOrigin(class CommandOrigin const &) = delete;
#endif

public:
    /**
     * @note   Virtual function table index: 0
     * @symbol 
     */
    virtual ~CommandOrigin();
    /**
     * @note   Virtual function table index: 1
     * @symbol ?getRequestId@VirtualCommandOrigin@@UEBAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
     */
    virtual std::string const & getRequestId() const = 0;
    /**
     * @note   Virtual function table index: 2
     * @symbol ?getName@VirtualCommandOrigin@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
     */
    virtual std::string getName() const = 0;
    /**
     * @note   Virtual function table index: 3
     * @symbol ?getBlockPosition@VirtualCommandOrigin@@UEBA?AVBlockPos@@XZ
     */
    virtual class BlockPos getBlockPosition() const = 0;
    /**
     * @note   Virtual function table index: 4
     * @symbol ?getWorldPosition@VirtualCommandOrigin@@UEBA?AVVec3@@XZ
     */
    virtual class Vec3 getWorldPosition() const = 0;
    /**
     * @note   Virtual function table index: 5
     * @symbol ?getRotation@VirtualCommandOrigin@@UEBA?AV?$optional@VVec2@@@std@@XZ
     */
    virtual class std::optional<class Vec2> getRotation() const = 0;
    /**
     * @note   Virtual function table index: 6
     * @symbol ?getLevel@VirtualCommandOrigin@@UEBAPEAVLevel@@XZ
     */
    virtual class Level * getLevel() const = 0;
    /**
     * @note   Virtual function table index: 7
     * @symbol ?getDimension@VirtualCommandOrigin@@UEBAPEAVDimension@@XZ
     */
    virtual class Dimension * getDimension() const = 0;
    /**
     * @note   Virtual function table index: 8
     * @symbol ?getEntity@VirtualCommandOrigin@@UEBAPEAVActor@@XZ
     */
    virtual class Actor * getEntity() const = 0;
    /**
     * @note   Virtual function table index: 9
     * @symbol ?getPermissionsLevel@VirtualCommandOrigin@@UEBA?AW4CommandPermissionLevel@@XZ
     */
    virtual enum CommandPermissionLevel getPermissionsLevel() const = 0;
    /**
     * @note   Virtual function table index: 10
     * @symbol ?clone@VirtualCommandOrigin@@UEBA?AV?$unique_ptr@VCommandOrigin@@U?$default_delete@VCommandOrigin@@@std@@@std@@XZ
     */
    virtual std::unique_ptr<class CommandOrigin> clone() const = 0;
    /**
     * @note   Virtual function table index: 11
     * @symbol ?getCursorHitBlockPos@CommandOrigin@@UEBA?AV?$optional@VBlockPos@@@std@@XZ
     */
    virtual class std::optional<class BlockPos> getCursorHitBlockPos() const;
    /**
     * @note   Virtual function table index: 12
     * @symbol ?getCursorHitPos@CommandOrigin@@UEBA?AV?$optional@VVec3@@@std@@XZ
     */
    virtual class std::optional<class Vec3> getCursorHitPos() const;
    /**
     * @note   Virtual function table index: 13
     * @symbol ?hasChatPerms@CommandOrigin@@UEBA_NXZ
     */
    virtual bool hasChatPerms() const;
    /**
     * @note   Virtual function table index: 14
     * @symbol ?hasTellPerms@CommandOrigin@@UEBA_NXZ
     */
    virtual bool hasTellPerms() const;
    /**
     * @note   Virtual function table index: 15
     * @symbol ?canUseAbility@CommandOrigin@@UEBA_NW4AbilitiesIndex@@@Z
     */
    virtual bool canUseAbility(enum AbilitiesIndex) const;
    /**
     * @note   Virtual function table index: 16
     * @symbol ?isWorldBuilder@CommandOrigin@@UEBA_NXZ
     */
    virtual bool isWorldBuilder() const;
    /**
     * @note   Virtual function table index: 17
     * @symbol ?canUseCommandsWithoutCheatsEnabled@CommandOrigin@@UEBA_NXZ
     */
    virtual bool canUseCommandsWithoutCheatsEnabled() const;
    /**
     * @note   Virtual function table index: 18
     * @symbol ?isSelectorExpansionAllowed@CommandOrigin@@UEBA_NXZ
     */
    virtual bool isSelectorExpansionAllowed() const;
    /**
     * @note   Virtual function table index: 19
     * @symbol ?getSourceId@CommandOrigin@@UEBAAEBVNetworkIdentifier@@XZ
     */
    virtual class NetworkIdentifier const & getSourceId() const;
    /**
     * @note   Virtual function table index: 20
     * @symbol ?getSourceSubId@CommandOrigin@@UEBA?AW4SubClientId@@XZ
     */
    virtual enum SubClientId getSourceSubId() const;
    /**
     * @note   Virtual function table index: 21
     * @symbol ?getOutputReceiver@CommandOrigin@@UEBAAEBV1@XZ
     */
    virtual class CommandOrigin const & getOutputReceiver() const;
    /**
     * @note   Virtual function table index: 22
     * @symbol ?getIdentity@CommandOrigin@@UEBA?AUCommandOriginIdentity@@XZ
     */
    virtual struct CommandOriginIdentity getIdentity() const;
    /**
     * @note   Virtual function table index: 23
     * @symbol ?getOriginType@VirtualCommandOrigin@@UEBA?AW4CommandOriginType@@XZ
     */
    virtual enum CommandOriginType getOriginType() const = 0;
    /**
     * @note   Virtual function table index: 24
     * @symbol ?toCommandOriginData@CommandOrigin@@UEBA?AUCommandOriginData@@XZ
     */
    virtual struct CommandOriginData toCommandOriginData() const;
    /**
     * @note   Virtual function table index: 25
     * @symbol ?getUUID@CommandOrigin@@UEBAAEBVUUID@mce@@XZ
     */
    virtual class mce::UUID const & getUUID() const;
    /**
     * @note   Virtual function table index: 26
     * @symbol ?handleCommandOutputCallback@CommandOrigin@@UEBAXH$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$QEAVValue@Json@@@Z
     */
    virtual void handleCommandOutputCallback(int, std::string &&, class Json::Value &&) const;
    /**
     * @note   Virtual function table index: 27
     * @symbol ?updateValues@CommandOrigin@@UEAAXXZ
     */
    virtual void updateValues();
    /**
     * @note   Virtual function table index: 28
     * @symbol ?getExecutePosition@CommandOrigin@@UEBA?BVVec3@@HAEBVCommandPositionFloat@@@Z
     */
    virtual class Vec3 const getExecutePosition(int, class CommandPositionFloat const &) const;
    /**
     * @note   Virtual function table index: 29
     * @symbol ?serialize@CommandOrigin@@UEBA?AVCompoundTag@@XZ
     */
    virtual class CompoundTag serialize() const;
    /**
     * @note   Virtual function table index: 30
     * @symbol ?isValid@VirtualCommandOrigin@@UEBA_NXZ
     */
    virtual bool isValid() const = 0;
    /**
     * @note   Virtual function table index: 31
     * @symbol ?_setUUID@CommandOrigin@@MEAAXAEBVUUID@mce@@@Z
     */
    virtual void _setUUID(class mce::UUID const &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_COMMANDORIGIN
#endif
    /**
     * @symbol ??0CommandOrigin@@QEAA@XZ
     */
    MCAPI CommandOrigin();
    /**
     * @symbol ?getAreaAt@CommandOrigin@@QEBA?AV?$unique_ptr@VCommandArea@@U?$default_delete@VCommandArea@@@std@@@std@@AEBVBlockPos@@0H_N@Z
     */
    MCAPI std::unique_ptr<class CommandArea> getAreaAt(class BlockPos const &, class BlockPos const &, int, bool) const;
    /**
     * @symbol ?getAreaAt@CommandOrigin@@QEBA?AV?$unique_ptr@VCommandArea@@U?$default_delete@VCommandArea@@@std@@@std@@AEBVBlockPos@@H@Z
     */
    MCAPI std::unique_ptr<class CommandArea> getAreaAt(class BlockPos const &, int) const;
    /**
     * @symbol ?getAreaAtWithBuffer@CommandOrigin@@QEBA?AV?$unique_ptr@VCommandArea@@U?$default_delete@VCommandArea@@@std@@@std@@AEBVBlockPos@@0H_N@Z
     */
    MCAPI std::unique_ptr<class CommandArea> getAreaAtWithBuffer(class BlockPos const &, class BlockPos const &, int, bool) const;
    /**
     * @symbol ?getAreaAtWithBuffer@CommandOrigin@@QEBA?AV?$unique_ptr@VCommandArea@@U?$default_delete@VCommandArea@@@std@@@std@@AEBVBlockPos@@H@Z
     */
    MCAPI std::unique_ptr<class CommandArea> getAreaAtWithBuffer(class BlockPos const &, int) const;
    /**
     * @symbol ?fromCommandOriginData@CommandOrigin@@SA?AV?$unique_ptr@VCommandOrigin@@U?$default_delete@VCommandOrigin@@@std@@@std@@AEBUCommandOriginData@@AEBV?$NonOwnerPointer@VILevel@@@Bedrock@@AEBVNetworkIdentifier@@W4SubClientId@@@Z
     */
    MCAPI static std::unique_ptr<class CommandOrigin> fromCommandOriginData(struct CommandOriginData const &, class Bedrock::NonOwnerPointer<class ILevel> const &, class NetworkIdentifier const &, enum SubClientId);

//protected:

protected:
MCAPI static class NetworkIdentifier sUnknownSource;

};