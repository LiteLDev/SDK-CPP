/**
 * @file  StayNearNoteblockGoal.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

/**
 * @brief MC class StayNearNoteblockGoal.
 *
 */
class StayNearNoteblockGoal {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_STAYNEARNOTEBLOCKGOAL
public:
    class StayNearNoteblockGoal& operator=(class StayNearNoteblockGoal const &) = delete;
    StayNearNoteblockGoal(class StayNearNoteblockGoal const &) = delete;
    StayNearNoteblockGoal() = delete;
#endif

public:
    /**
     * @note   Virtual function table index: 0
     * @symbol 
     */
    virtual ~StayNearNoteblockGoal();
    /**
     * @note   Virtual function table index: 1
     * @symbol ?canUse@StayNearNoteblockGoal@@UEAA_NXZ
     */
    virtual bool canUse();
    /**
     * @note   Virtual function table index: 2
     * @symbol ?canContinueToUse@StayNearNoteblockGoal@@UEAA_NXZ
     */
    virtual bool canContinueToUse();
    /**
     * @note   Virtual function table index: 3
     * @symbol 
     */
    virtual void __unk_vfn_3();
    /**
     * @note   Virtual function table index: 4
     * @symbol ?start@StayNearNoteblockGoal@@UEAAXXZ
     */
    virtual void start();
    /**
     * @note   Virtual function table index: 5
     * @symbol ?stop@StayNearNoteblockGoal@@UEAAXXZ
     */
    virtual void stop();
    /**
     * @note   Virtual function table index: 6
     * @symbol ?tick@StayNearNoteblockGoal@@UEAAXXZ
     */
    virtual void tick();
    /**
     * @note   Virtual function table index: 7
     * @symbol ?appendDebugInfo@StayNearNoteblockGoal@@UEBAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     */
    virtual void appendDebugInfo(std::string &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_STAYNEARNOTEBLOCKGOAL
#endif
    /**
     * @symbol ??0StayNearNoteblockGoal@@QEAA@AEAVMob@@@Z
     */
    MCAPI StayNearNoteblockGoal(class Mob &);

//private:
    /**
     * @symbol ?_hasLastVibrationAtNoteblock@StayNearNoteblockGoal@@AEAA?BV?$optional@VBlockPos@@@std@@XZ
     */
    MCAPI class std::optional<class BlockPos> const _hasLastVibrationAtNoteblock();

private:

};